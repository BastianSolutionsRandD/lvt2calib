#!/usr/bin/env python
PACKAGE = "lvt2calib"

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# x_passthrough_filter: Remove the refelction noise produced by Livox.
gen.add("remove_x_min", double_t, 0, "X-axis passthrough filter", -1, -5, 5 )
gen.add("remove_x_max", double_t, 0, "X-axis passthrough filter", 1, -5, 5 )

# voxel filter: use VoxelGrid to downsample and uniform the point cloud.
gen.add("voxel_grid_size", double_t, 0, "Grid size of the VoxelGrid filter", 0.01, 0, 1)

# gauss filter: gaussian filter, used in automatic detection of the calibration board.
gen.add("gauss_k_sigma", double_t, 0, "The sigma (standard deviation) of the Gaussian Kernel", 3, 2, 6)
gen.add("gauss_k_thre_rt_sigma", double_t, 0, "The distance threshold relative to a sigma factor", 3, 2, 6)
gen.add("gauss_k_thre", double_t, 0, "The distance threshold of the Guassian Kernal", 0.05, 0, 2)
gen.add("gauss_conv_radius", double_t, 0, "The sphere radius for determining the nearest neighbors", 0.02, 0, 2)

# cluster: do cluster before the plane segmentation. 
gen.add("cluster_tole", double_t, 0, "The spatial cluster tolerance", 0.05, 0, 0.2)
gen.add("cluster_size_min", double_t, 0, "Min scale for the number of points that a cluster needs to contain", 0.01, 0, 2)
gen.add("cluster_size_max", double_t, 0, "Max scale for the number of points that a cluster needs to contain", 5, 0, 50)

# RANSAC plane segmentation
gen.add("Pseg_dis_thre", double_t, 0, "The threshold of the distance to the model", 0.02, 0, 0.05)
gen.add("Pseg_iter_num", int_t, 0, "Max number of iterations the sample consensus method will run", 1000, 100, 5000)
gen.add("Pseg_size_min", double_t, 0, "Min scale of the plane size (relative to the size of the cluster to which the plane belongs)", 0.05, 0, 1)

# RG plane segmentation
gen.add("RG_smooth_thre_deg", double_t, 0, "The smooth threshold (deg) of RG plane segmentation", 5.0, 0, 10.0)
gen.add("RG_curve_thre", double_t, 0, "The cuevature threshold of RG plane segmentation", 0.1, 0.0, 2.0)
gen.add("RG_neighbor_n", int_t, 0, "The number of neighbors for RG plane segmentation", 30, 1, 100)


# statistic filter
gen.add("sor_MeanK", int_t, 0, "Number of nearest neighbors to use for mean distance estimation", 20, 0, 100)
gen.add("sor_StddevMulThresh", int_t, 0, "Standard deviation multiplier for the distance threshold calculation", 1, 0, 10)

# intensity filter
gen.add("i_filter_out_min", double_t, 0, "Min intensity to remove", 0, 0, 200)
gen.add("i_filter_out_max", double_t, 0, "Max intensity to remove", 20, 0, 200)

# boundary estimation: to estimate the surface boundary based on the normal estimation
gen.add("boundEstRad", double_t, 0, "Number of k nearest neighbors to use for the boundary estimation", 30, 0, 100)
gen.add("normEstRad", double_t, 0, "Number of k nearest neighbors to use for the normal estimation", 50, 0, 100)

# template matching criterion
gen.add("rmse_ukn2tpl_thre", double_t, 0, "Similarity threshold between the point cloud to be evaluated and the template point cloud", 0.03, 0, 0.1)
gen.add("rmse_tpl2ukn_thre", double_t, 0, "Similarity threshold between the point cloud to be evaluated and the template point cloud", 0.03, 0, 0.1)

# center extraction: based on circle extraction
gen.add("circle_radius", double_t, 0, "Radius for the circle model", 0.12, 0, 0.5)
gen.add("circle_seg_thre", double_t, 0, "Allowable radius limits for the circle model", 0.02, 0, 0.1)
gen.add("centroid_dis_min", double_t, 0, "Limits for the distance between the center of the detected circle and the centroid of the whole point cloud", 0.15, 0, 1)
gen.add("centroid_dis_max", double_t, 0, "Limits for the distance between the center of the detected circle and the centroid of the whole point cloud", 0.25, 0, 1)
gen.add("min_inter_center_dist", double_t, 0, "The minimum distance between any two centers on the board", 0.15, 0, 1)
gen.add("min_centers_found", int_t, 0, "Min number of centers extracted", 4, 0, 10)

# gause filter2: used to smooth the accumulated calibration board point cloud
gen.add("gauss_k_sigma2", double_t, 0, "The sigma (standard deviation) of the Gaussian Kernel", 3, 2, 6)
gen.add("gauss_k_thre_rt_sigma2", double_t, 0, "The distance threshold relative to a sigma factor", 3, 2, 6)
gen.add("gauss_k_thre2", double_t, 0, "The distance threshold of the Guassian Kernal", 0.05, 0, 2)
gen.add("gauss_conv_radius2", double_t, 0, "The sphere radius for determining the nearest neighbors", 0.02, 0, 2)

                                                                                                                                                                            
exit(gen.generate(PACKAGE, "lvt2calib", "Laser"))
